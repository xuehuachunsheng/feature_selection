package ufs.cluster.evaluate.impl;

import org.ujmp.core.Matrix;
import org.ujmp.core.calculation.Calculation.Ret;

import ufs.cluster.evaluate.OuterIndex;
import ufs.utils.Utils;

/**
 * The basic implementation of Purity Index <br>
 * Author: Yanxue <br>
 * E-mail: yeah_imwyx@163.com <br>
 * Organization: <a href=http://www.fansmale.com>Lab of Machine Learning</a>
 * Written Time: Jan. 12, 2017 <br>
 * Last Modified Time: Jan. 12, 2017 <br>
 * Progress: Done.<br>
 */
public class Purity extends OuterIndex {

	/**
	 * The coefficient matrix is generated by the intersection of each predict
	 * cluster and real cluster. It is used in finding max matching for
	 * bipartite graph. The element in i-th row and j-th column represents that
	 * the size of intersection set of i-th predict cluster and the j-th real
	 * cluster.
	 */
	Matrix coefficientMatrix;

	public Purity(Matrix pData, int[] pPredictLabels, int[] pRealLabels) {
		super(pData, pPredictLabels, pRealLabels);
		coefficientMatrixGenerated();
	}

	/**
	 * This method constructs the coefficient matrix to compute max matching for
	 * bipartite graph.
	 */
	protected void coefficientMatrixGenerated() {

		int numClusterPred = Utils.maxValueAndIndex(predictLabels)[0] + 1;
		int numClusterReal = Utils.maxValueAndIndex(realLabels)[0] + 1;
		Matrix tCoefficientMatrix = Matrix.Factory.zeros(numClusterPred,
				numClusterReal);
		int[] predictClusterSize = new int[numClusterPred];

		int[] realClusterSize = new int[numClusterReal];

		for (int i = 0; i < predictLabels.length; i++) {
			int tValue = tCoefficientMatrix.getAsInt(predictLabels[i],
					realLabels[i]);
			tCoefficientMatrix.setAsInt(tValue + 1, predictLabels[i],
					realLabels[i]);
			predictClusterSize[predictLabels[i]]++;
			realClusterSize[realLabels[i]]++;
		}
		coefficientMatrix = tCoefficientMatrix;
	}

	@Override
	public double precision() {
		return coefficientMatrix.max(Ret.NEW, Matrix.COLUMN)
				.sum(Ret.NEW, Matrix.ALL, false).getAsDouble(0, 0)
				/ data.getRowCount();
	}

}
